// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DecayPeriodVoteUpdate extends ethereum.Event {
  get params(): DecayPeriodVoteUpdate__Params {
    return new DecayPeriodVoteUpdate__Params(this);
  }
}

export class DecayPeriodVoteUpdate__Params {
  _event: DecayPeriodVoteUpdate;

  constructor(event: DecayPeriodVoteUpdate) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get decayPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isDefault(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get token0Amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get token1Amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Error extends ethereum.Event {
  get params(): Error__Params {
    return new Error__Params(this);
  }
}

export class Error__Params {
  _event: Error;

  constructor(event: Error) {
    this._event = event;
  }

  get reason(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class FeeVoteUpdate extends ethereum.Event {
  get params(): FeeVoteUpdate__Params {
    return new FeeVoteUpdate__Params(this);
  }
}

export class FeeVoteUpdate__Params {
  _event: FeeVoteUpdate;

  constructor(event: FeeVoteUpdate) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isDefault(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SlippageFeeVoteUpdate extends ethereum.Event {
  get params(): SlippageFeeVoteUpdate__Params {
    return new SlippageFeeVoteUpdate__Params(this);
  }
}

export class SlippageFeeVoteUpdate__Params {
  _event: SlippageFeeVoteUpdate;

  constructor(event: SlippageFeeVoteUpdate) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get slippageFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isDefault(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Swapped extends ethereum.Event {
  get params(): Swapped__Params {
    return new Swapped__Params(this);
  }
}

export class Swapped__Params {
  _event: Swapped;

  constructor(event: Swapped) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get srcToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get dstToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get result(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get srcAdditionBalance(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get dstRemovalBalance(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get referral(): Address {
    return this._event.parameters[8].value.toAddress();
  }
}

export class Sync extends ethereum.Event {
  get params(): Sync__Params {
    return new Sync__Params(this);
  }
}

export class Sync__Params {
  _event: Sync;

  constructor(event: Sync) {
    this._event = event;
  }

  get srcBalance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get dstBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get slippageFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get referralShare(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get governanceShare(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get token0Amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get token1Amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PoolAbi__virtualBalancesForAdditionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PoolAbi__virtualBalancesForRemovalResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PoolAbi__virtualDecayPeriodResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class PoolAbi__virtualFeeResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class PoolAbi__virtualSlippageFeeResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class PoolAbi__volumesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PoolAbi extends ethereum.SmartContract {
  static bind(address: Address): PoolAbi {
    return new PoolAbi("PoolAbi", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decayPeriod(): BigInt {
    let result = super.call("decayPeriod", "decayPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decayPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decayPeriod", "decayPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decayPeriodVotes(user: Address): BigInt {
    let result = super.call(
      "decayPeriodVotes",
      "decayPeriodVotes(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_decayPeriodVotes(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decayPeriodVotes",
      "decayPeriodVotes(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeVotes(user: Address): BigInt {
    let result = super.call("feeVotes", "feeVotes(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_feeVotes(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeVotes", "feeVotes(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBalanceForAddition(token: Address): BigInt {
    let result = super.call(
      "getBalanceForAddition",
      "getBalanceForAddition(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getBalanceForAddition(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBalanceForAddition",
      "getBalanceForAddition(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBalanceForRemoval(token: Address): BigInt {
    let result = super.call(
      "getBalanceForRemoval",
      "getBalanceForRemoval(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getBalanceForRemoval(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBalanceForRemoval",
      "getBalanceForRemoval(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReturn(src: Address, dst: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getReturn",
      "getReturn(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getReturn(
    src: Address,
    dst: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReturn",
      "getReturn(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokens(): Array<Address> {
    let result = super.call("getTokens", "getTokens():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getTokens", "getTokens():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mooniswapFactoryGovernance(): Address {
    let result = super.call(
      "mooniswapFactoryGovernance",
      "mooniswapFactoryGovernance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_mooniswapFactoryGovernance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mooniswapFactoryGovernance",
      "mooniswapFactoryGovernance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  slippageFee(): BigInt {
    let result = super.call("slippageFee", "slippageFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_slippageFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slippageFee", "slippageFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slippageFeeVotes(user: Address): BigInt {
    let result = super.call(
      "slippageFeeVotes",
      "slippageFeeVotes(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_slippageFeeVotes(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slippageFeeVotes",
      "slippageFeeVotes(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token0(): Address {
    let result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    let result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    let result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    let result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokens(i: BigInt): Address {
    let result = super.call("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(i)
    ]);

    return result[0].toAddress();
  }

  try_tokens(i: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(i)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  virtualBalancesForAddition(
    param0: Address
  ): PoolAbi__virtualBalancesForAdditionResult {
    let result = super.call(
      "virtualBalancesForAddition",
      "virtualBalancesForAddition(address):(uint216,uint40)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PoolAbi__virtualBalancesForAdditionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_virtualBalancesForAddition(
    param0: Address
  ): ethereum.CallResult<PoolAbi__virtualBalancesForAdditionResult> {
    let result = super.tryCall(
      "virtualBalancesForAddition",
      "virtualBalancesForAddition(address):(uint216,uint40)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolAbi__virtualBalancesForAdditionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  virtualBalancesForRemoval(
    param0: Address
  ): PoolAbi__virtualBalancesForRemovalResult {
    let result = super.call(
      "virtualBalancesForRemoval",
      "virtualBalancesForRemoval(address):(uint216,uint40)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PoolAbi__virtualBalancesForRemovalResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_virtualBalancesForRemoval(
    param0: Address
  ): ethereum.CallResult<PoolAbi__virtualBalancesForRemovalResult> {
    let result = super.tryCall(
      "virtualBalancesForRemoval",
      "virtualBalancesForRemoval(address):(uint216,uint40)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolAbi__virtualBalancesForRemovalResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  virtualDecayPeriod(): PoolAbi__virtualDecayPeriodResult {
    let result = super.call(
      "virtualDecayPeriod",
      "virtualDecayPeriod():(uint104,uint104,uint48)",
      []
    );

    return new PoolAbi__virtualDecayPeriodResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_virtualDecayPeriod(): ethereum.CallResult<
    PoolAbi__virtualDecayPeriodResult
  > {
    let result = super.tryCall(
      "virtualDecayPeriod",
      "virtualDecayPeriod():(uint104,uint104,uint48)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolAbi__virtualDecayPeriodResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  virtualFee(): PoolAbi__virtualFeeResult {
    let result = super.call(
      "virtualFee",
      "virtualFee():(uint104,uint104,uint48)",
      []
    );

    return new PoolAbi__virtualFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_virtualFee(): ethereum.CallResult<PoolAbi__virtualFeeResult> {
    let result = super.tryCall(
      "virtualFee",
      "virtualFee():(uint104,uint104,uint48)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolAbi__virtualFeeResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  virtualSlippageFee(): PoolAbi__virtualSlippageFeeResult {
    let result = super.call(
      "virtualSlippageFee",
      "virtualSlippageFee():(uint104,uint104,uint48)",
      []
    );

    return new PoolAbi__virtualSlippageFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_virtualSlippageFee(): ethereum.CallResult<
    PoolAbi__virtualSlippageFeeResult
  > {
    let result = super.tryCall(
      "virtualSlippageFee",
      "virtualSlippageFee():(uint104,uint104,uint48)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolAbi__virtualSlippageFeeResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  volumes(param0: Address): PoolAbi__volumesResult {
    let result = super.call("volumes", "volumes(address):(uint128,uint128)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new PoolAbi__volumesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_volumes(param0: Address): ethereum.CallResult<PoolAbi__volumesResult> {
    let result = super.tryCall(
      "volumes",
      "volumes(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolAbi__volumesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  withdraw(amount: BigInt, minReturns: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,uint256[]):(uint256[2])",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigIntArray(minReturns)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_withdraw(
    amount: BigInt,
    minReturns: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,uint256[]):(uint256[2])",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigIntArray(minReturns)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  withdrawFor(
    amount: BigInt,
    minReturns: Array<BigInt>,
    target: Address
  ): Array<BigInt> {
    let result = super.call(
      "withdrawFor",
      "withdrawFor(uint256,uint256[],address):(uint256[2])",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigIntArray(minReturns),
        ethereum.Value.fromAddress(target)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_withdrawFor(
    amount: BigInt,
    minReturns: Array<BigInt>,
    target: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "withdrawFor",
      "withdrawFor(uint256,uint256[],address):(uint256[2])",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigIntArray(minReturns),
        ethereum.Value.fromAddress(target)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _mooniswapFactoryGovernance(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecayPeriodVoteCall extends ethereum.Call {
  get inputs(): DecayPeriodVoteCall__Inputs {
    return new DecayPeriodVoteCall__Inputs(this);
  }

  get outputs(): DecayPeriodVoteCall__Outputs {
    return new DecayPeriodVoteCall__Outputs(this);
  }
}

export class DecayPeriodVoteCall__Inputs {
  _call: DecayPeriodVoteCall;

  constructor(call: DecayPeriodVoteCall) {
    this._call = call;
  }

  get vote(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DecayPeriodVoteCall__Outputs {
  _call: DecayPeriodVoteCall;

  constructor(call: DecayPeriodVoteCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get maxAmounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get minAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get fairSupply(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get receivedAmounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get maxAmounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get minAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get target(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get fairSupply(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get receivedAmounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class DiscardDecayPeriodVoteCall extends ethereum.Call {
  get inputs(): DiscardDecayPeriodVoteCall__Inputs {
    return new DiscardDecayPeriodVoteCall__Inputs(this);
  }

  get outputs(): DiscardDecayPeriodVoteCall__Outputs {
    return new DiscardDecayPeriodVoteCall__Outputs(this);
  }
}

export class DiscardDecayPeriodVoteCall__Inputs {
  _call: DiscardDecayPeriodVoteCall;

  constructor(call: DiscardDecayPeriodVoteCall) {
    this._call = call;
  }
}

export class DiscardDecayPeriodVoteCall__Outputs {
  _call: DiscardDecayPeriodVoteCall;

  constructor(call: DiscardDecayPeriodVoteCall) {
    this._call = call;
  }
}

export class DiscardFeeVoteCall extends ethereum.Call {
  get inputs(): DiscardFeeVoteCall__Inputs {
    return new DiscardFeeVoteCall__Inputs(this);
  }

  get outputs(): DiscardFeeVoteCall__Outputs {
    return new DiscardFeeVoteCall__Outputs(this);
  }
}

export class DiscardFeeVoteCall__Inputs {
  _call: DiscardFeeVoteCall;

  constructor(call: DiscardFeeVoteCall) {
    this._call = call;
  }
}

export class DiscardFeeVoteCall__Outputs {
  _call: DiscardFeeVoteCall;

  constructor(call: DiscardFeeVoteCall) {
    this._call = call;
  }
}

export class DiscardSlippageFeeVoteCall extends ethereum.Call {
  get inputs(): DiscardSlippageFeeVoteCall__Inputs {
    return new DiscardSlippageFeeVoteCall__Inputs(this);
  }

  get outputs(): DiscardSlippageFeeVoteCall__Outputs {
    return new DiscardSlippageFeeVoteCall__Outputs(this);
  }
}

export class DiscardSlippageFeeVoteCall__Inputs {
  _call: DiscardSlippageFeeVoteCall;

  constructor(call: DiscardSlippageFeeVoteCall) {
    this._call = call;
  }
}

export class DiscardSlippageFeeVoteCall__Outputs {
  _call: DiscardSlippageFeeVoteCall;

  constructor(call: DiscardSlippageFeeVoteCall) {
    this._call = call;
  }
}

export class FeeVoteCall extends ethereum.Call {
  get inputs(): FeeVoteCall__Inputs {
    return new FeeVoteCall__Inputs(this);
  }

  get outputs(): FeeVoteCall__Outputs {
    return new FeeVoteCall__Outputs(this);
  }
}

export class FeeVoteCall__Inputs {
  _call: FeeVoteCall;

  constructor(call: FeeVoteCall) {
    this._call = call;
  }

  get vote(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FeeVoteCall__Outputs {
  _call: FeeVoteCall;

  constructor(call: FeeVoteCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueFundsCall extends ethereum.Call {
  get inputs(): RescueFundsCall__Inputs {
    return new RescueFundsCall__Inputs(this);
  }

  get outputs(): RescueFundsCall__Outputs {
    return new RescueFundsCall__Outputs(this);
  }
}

export class RescueFundsCall__Inputs {
  _call: RescueFundsCall;

  constructor(call: RescueFundsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RescueFundsCall__Outputs {
  _call: RescueFundsCall;

  constructor(call: RescueFundsCall) {
    this._call = call;
  }
}

export class SetMooniswapFactoryGovernanceCall extends ethereum.Call {
  get inputs(): SetMooniswapFactoryGovernanceCall__Inputs {
    return new SetMooniswapFactoryGovernanceCall__Inputs(this);
  }

  get outputs(): SetMooniswapFactoryGovernanceCall__Outputs {
    return new SetMooniswapFactoryGovernanceCall__Outputs(this);
  }
}

export class SetMooniswapFactoryGovernanceCall__Inputs {
  _call: SetMooniswapFactoryGovernanceCall;

  constructor(call: SetMooniswapFactoryGovernanceCall) {
    this._call = call;
  }

  get newMooniswapFactoryGovernance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMooniswapFactoryGovernanceCall__Outputs {
  _call: SetMooniswapFactoryGovernanceCall;

  constructor(call: SetMooniswapFactoryGovernanceCall) {
    this._call = call;
  }
}

export class SlippageFeeVoteCall extends ethereum.Call {
  get inputs(): SlippageFeeVoteCall__Inputs {
    return new SlippageFeeVoteCall__Inputs(this);
  }

  get outputs(): SlippageFeeVoteCall__Outputs {
    return new SlippageFeeVoteCall__Outputs(this);
  }
}

export class SlippageFeeVoteCall__Inputs {
  _call: SlippageFeeVoteCall;

  constructor(call: SlippageFeeVoteCall) {
    this._call = call;
  }

  get vote(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SlippageFeeVoteCall__Outputs {
  _call: SlippageFeeVoteCall;

  constructor(call: SlippageFeeVoteCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get referral(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get result(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapForCall extends ethereum.Call {
  get inputs(): SwapForCall__Inputs {
    return new SwapForCall__Inputs(this);
  }

  get outputs(): SwapForCall__Outputs {
    return new SwapForCall__Outputs(this);
  }
}

export class SwapForCall__Inputs {
  _call: SwapForCall;

  constructor(call: SwapForCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get referral(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class SwapForCall__Outputs {
  _call: SwapForCall;

  constructor(call: SwapForCall) {
    this._call = call;
  }

  get result(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minReturns(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get withdrawnAmounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class WithdrawForCall extends ethereum.Call {
  get inputs(): WithdrawForCall__Inputs {
    return new WithdrawForCall__Inputs(this);
  }

  get outputs(): WithdrawForCall__Outputs {
    return new WithdrawForCall__Outputs(this);
  }
}

export class WithdrawForCall__Inputs {
  _call: WithdrawForCall;

  constructor(call: WithdrawForCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minReturns(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get target(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawForCall__Outputs {
  _call: WithdrawForCall;

  constructor(call: WithdrawForCall) {
    this._call = call;
  }

  get withdrawnAmounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}
